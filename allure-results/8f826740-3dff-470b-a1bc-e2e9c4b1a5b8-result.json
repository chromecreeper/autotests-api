{"name": "Get user me", "status": "broken", "statusDetails": {"message": "NameError: name 'Draft202012Validator' is not defined", "trace": "self = <tests.users.test_users.TestUsers object at 0x107592210>\nfunction_user = UserFixture(request=CreateUserRequestSchema(email='brianamartin@example.com', password='_irvH13(6H', last_name='Schnei...bdc7-111ec8052523', email='brianamartin@example.com', last_name='Schneider', first_name='James', middle_name='Haley')))\nprivate_users_client = <clients.users.private_users_client.PrivateUsersClient object at 0x1078ee290>\n\n    @allure.tag(AllureTag.GET_ENTITY)\n    @allure.story(AllureStory.GET_ENTITY)\n    @allure.title(\"Get user me\")\n    def test_ger_user_me(\n            self,\n            function_user: UserFixture,\n            private_users_client: PrivateUsersClient\n    ):\n        response = private_users_client.get_user_me_api()\n        response_data = GetUserResponseSchema.model_validate_json(response.text)\n    \n        assert_status_code(response.status_code, HTTPStatus.OK)\n        assert_get_user_response(response_data, function_user.response)\n    \n>       validate_json_schema(response.json(), response_data.model_json_schema())\n\ntests/users/test_users.py:60: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ninstance = {'user': {'email': 'brianamartin@example.com', 'firstName': 'James', 'id': '14e286d2-76ef-41d3-bdc7-111ec8052523', 'lastName': 'Schneider', ...}}\nschema = {'$defs': {'UserSchema': {'description': 'Описание структуры пользователя.', 'properties': {'email': {'format': 'email...ры запроса получения пользователя.', 'properties': {'user': {'$ref': '#/$defs/UserSchema'}}, 'required': ['user'], ...}\n\n    @allure.step(\"Validating JSON schema\")\n    def validate_json_schema(instance: Any, schema: dict) -> None:\n        \"\"\"\n        Проверяет, соответствует ли JSON-объект (instance) заданной JSON-схеме (schema).\n    \n        :param instance: JSON-данные, которые нужно проверить.\n        :param schema: Ожидаемая JSON-schema.\n        :raises jsonschema.exceptions.ValidationError: Если instance не соответствует schema.\n        \"\"\"\n        # Логируем факт начала валидации\n        logger.info(\"Validating JSON schema\")\n    \n        validate(\n            schema=schema,\n            instance=instance,\n>           format_checker=Draft202012Validator.FORMAT_CHECKER,\n                           ^^^^^^^^^^^^^^^^^^^^\n        )\nE       NameError: name 'Draft202012Validator' is not defined\n\ntools/assertions/schema.py:25: NameError"}, "steps": [{"name": "Get user me", "status": "passed", "steps": [{"name": "Make GET request to '/api/v1/users/me'", "status": "passed", "attachments": [{"name": "cURL command", "source": "e9f3a6f8-7e5e-4775-ab61-b7d40681d173-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "url", "value": "'/api/v1/users/me'"}, {"name": "params", "value": "None"}], "start": 1752506429434, "stop": 1752506429439}], "start": 1752506429434, "stop": 1752506429439}, {"name": "Check that response status code equals to <HTTPStatus.OK: 200>", "status": "passed", "parameters": [{"name": "actual", "value": "200"}, {"name": "expected", "value": "<HTTPStatus.OK: 200>"}], "start": 1752506429439, "stop": 1752506429439}, {"name": "Check get user response", "status": "passed", "steps": [{"name": "Check user", "status": "passed", "steps": [{"name": "Check that 'id' equals to '14e286d2-76ef-41d3-bdc7-111ec8052523'", "status": "passed", "parameters": [{"name": "actual", "value": "'14e286d2-76ef-41d3-bdc7-111ec8052523'"}, {"name": "expected", "value": "'14e286d2-76ef-41d3-bdc7-111ec8052523'"}, {"name": "name", "value": "'id'"}], "start": 1752506429439, "stop": 1752506429439}, {"name": "Check that 'email' equals to 'brianamartin@example.com'", "status": "passed", "parameters": [{"name": "actual", "value": "'brianamartin@example.com'"}, {"name": "expected", "value": "'brianamartin@example.com'"}, {"name": "name", "value": "'email'"}], "start": 1752506429439, "stop": 1752506429439}, {"name": "Check that 'last_name' equals to 'Schneider'", "status": "passed", "parameters": [{"name": "actual", "value": "'Schneider'"}, {"name": "expected", "value": "'Schneider'"}, {"name": "name", "value": "'last_name'"}], "start": 1752506429439, "stop": 1752506429439}, {"name": "Check that 'first_name' equals to 'James'", "status": "passed", "parameters": [{"name": "actual", "value": "'James'"}, {"name": "expected", "value": "'James'"}, {"name": "name", "value": "'first_name'"}], "start": 1752506429439, "stop": 1752506429439}, {"name": "Check that 'middle_name' equals to 'Haley'", "status": "passed", "parameters": [{"name": "actual", "value": "'Haley'"}, {"name": "expected", "value": "'Haley'"}, {"name": "name", "value": "'middle_name'"}], "start": 1752506429439, "stop": 1752506429439}], "parameters": [{"name": "actual", "value": "UserSchema(id='14e286d2-76ef-41d3-bdc7-111ec8052523', email='brianamartin@example.com', last_name='Schneider', first_name='James', middle_name='Haley')"}, {"name": "expected", "value": "UserSchema(id='14e286d2-76ef-41d3-bdc7-111ec8052523', email='brianamartin@example.com', last_name='Schneider', first_name='James', middle_name='Haley')"}], "start": 1752506429439, "stop": 1752506429439}], "parameters": [{"name": "get_user_response", "value": "GetUserResponseSchema(user=UserSchema(id='14e286d2-76ef-41d3-bdc7-111ec8052523', email='brianamartin@example.com', last_name='Schneider', first_name='James', middle_name='Haley'))"}, {"name": "create_user_response", "value": "CreateUserResponseSchema(user=UserSchema(id='14e286d2-76ef-41d3-bdc7-111ec8052523', email='brianamartin@example.com', last_name='Schneider', first_name='James', middle_name='Haley'))"}], "start": 1752506429439, "stop": 1752506429439}, {"name": "Validating JSON schema", "status": "broken", "statusDetails": {"message": "NameError: name 'Draft202012Validator' is not defined\n", "trace": "  File \"/Users/basmakovoleg/my-git-projects/autotests-api/.venv/lib/python3.11/site-packages/allure_commons/_allure.py\", line 202, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/Users/basmakovoleg/my-git-projects/autotests-api/tools/assertions/schema.py\", line 25, in validate_json_schema\n    format_checker=Draft202012Validator.FORMAT_CHECKER,\n                   ^^^^^^^^^^^^^^^^^^^^\n"}, "parameters": [{"name": "instance", "value": "{'user': {'id': '14e286d2-76ef-41d3-bdc7-111ec8052523', 'email': 'brianamartin@example.com', 'lastName': 'Schneider', 'firstName': 'James', 'middleName': 'Haley'}}"}, {"name": "schema", "value": "{'$defs': {'UserSchema': {'description': 'Описание структуры пользователя.', 'properties': {'id': {'title': 'Id', 'type': 'string'}, 'email': {'format': 'email', 'title': 'Email', 'type': 'string'}, 'lastName': {'title': 'Lastname', 'type': 'string'}, 'firstName': {'title': 'Firstname', 'type': 'string'}, 'middleName': {'title': 'Middlename', 'type': 'string'}}, 'required': ['id', 'email', 'lastName', 'firstName', 'middleName'], 'title': 'UserSchema', 'type': 'object'}}, 'description': 'Описание структуры запроса получения пользователя.', 'properties': {'user': {'$ref': '#/$defs/UserSchema'}}, 'required': ['user'], 'title': 'GetUserResponseSchema', 'type': 'object'}"}], "start": 1752506429440, "stop": 1752506429440}], "attachments": [{"name": "log", "source": "b05bbe08-a6ce-41e8-8f9f-f5e896cb2ce6-attachment.txt", "type": "text/plain"}], "start": 1752506429434, "stop": 1752506429440, "uuid": "fd15f554-ee7c-4150-8578-a6ef4d58bdd3", "historyId": "80e51c848c2211b2acc80dd4bcc8bf5e", "testCaseId": "80e51c848c2211b2acc80dd4bcc8bf5e", "fullName": "tests.users.test_users.TestUsers#test_ger_user_me", "labels": [{"name": "feature", "value": "Users"}, {"name": "tag", "value": "REGRESSION"}, {"name": "tag", "value": "USERS"}, {"name": "parentSuite", "value": "LMS service"}, {"name": "epic", "value": "LMS service"}, {"name": "suite", "value": "Users"}, {"name": "tag", "value": "GET_ENTITY"}, {"name": "story", "value": "Get entity"}, {"name": "tag", "value": "regression"}, {"name": "tag", "value": "users"}, {"name": "subSuite", "value": "TestUsers"}, {"name": "host", "value": "MacBook-Pro-Tochka-2.local"}, {"name": "thread", "value": "20295-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.users.test_users"}]}