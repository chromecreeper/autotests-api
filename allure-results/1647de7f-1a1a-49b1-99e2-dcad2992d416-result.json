{"name": "Create user", "status": "broken", "statusDetails": {"message": "NameError: name 'Draft202012Validator' is not defined", "trace": "self = <tests.users.test_users.TestUsers object at 0x107591c10>, email = 'mail.ru'\npublic_users_client = <clients.users.public_users_client.PublicUsersClient object at 0x1078e0b50>\n\n    @pytest.mark.parametrize(\"email\", [\"mail.ru\", \"gmail.com\", \"example.com\"])\n    @allure.tag(AllureTag.CREATE_ENTITY)\n    @allure.story(AllureStory.CREATE_ENTITY)\n    @allure.title(\"Create user\")\n    @allure.severity(Severity.BLOCKER)\n    @allure.sub_suite(AllureStory.CREATE_ENTITY)\n    def test_create_user(self, email: str, public_users_client: PublicUsersClient):\n        request = CreateUserRequestSchema(email=fake.email(domain=email))\n        response = public_users_client.create_user_api(request)\n        response_data = CreateUserResponseSchema.model_validate_json(response.text)\n    \n        assert_status_code(response.status_code, HTTPStatus.OK)\n        assert_create_user_response(request, response_data)\n    \n>       validate_json_schema(response.json(), response_data.model_json_schema())\n\ntests/users/test_users.py:43: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ninstance = {'user': {'email': 'mendozajean@mail.ru', 'firstName': 'Tiffany', 'id': 'db1b475a-80f7-40ab-801f-22a3e319f791', 'lastName': 'Ramos', ...}}\nschema = {'$defs': {'UserSchema': {'description': 'Описание структуры пользователя.', 'properties': {'email': {'format': 'email...туры ответа создания пользователя.', 'properties': {'user': {'$ref': '#/$defs/UserSchema'}}, 'required': ['user'], ...}\n\n    @allure.step(\"Validating JSON schema\")\n    def validate_json_schema(instance: Any, schema: dict) -> None:\n        \"\"\"\n        Проверяет, соответствует ли JSON-объект (instance) заданной JSON-схеме (schema).\n    \n        :param instance: JSON-данные, которые нужно проверить.\n        :param schema: Ожидаемая JSON-schema.\n        :raises jsonschema.exceptions.ValidationError: Если instance не соответствует schema.\n        \"\"\"\n        # Логируем факт начала валидации\n        logger.info(\"Validating JSON schema\")\n    \n        validate(\n            schema=schema,\n            instance=instance,\n>           format_checker=Draft202012Validator.FORMAT_CHECKER,\n                           ^^^^^^^^^^^^^^^^^^^^\n        )\nE       NameError: name 'Draft202012Validator' is not defined\n\ntools/assertions/schema.py:25: NameError"}, "steps": [{"name": "Create user", "status": "passed", "steps": [{"name": "Make POST request to '/api/v1/users'", "status": "passed", "attachments": [{"name": "cURL command", "source": "fa497268-861d-4f93-bcfb-a6d53118f292-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "url", "value": "'/api/v1/users'"}, {"name": "json", "value": "{'email': 'mendozajean@mail.ru', 'password': 'g(43X^BxNL', 'lastName': 'Ramos', 'firstName': 'Tiffany', 'middleName': 'Stephanie'}"}, {"name": "data", "value": "None"}, {"name": "files", "value": "None"}], "start": 1752506428069, "stop": 1752506428365}], "parameters": [{"name": "request", "value": "CreateUserRequestSchema(email='mendozajean@mail.ru', password='g(43X^BxNL', last_name='Ramos', first_name='Tiffany', middle_name='Stephanie')"}], "start": 1752506428069, "stop": 1752506428365}, {"name": "Check that response status code equals to <HTTPStatus.OK: 200>", "status": "passed", "parameters": [{"name": "actual", "value": "200"}, {"name": "expected", "value": "<HTTPStatus.OK: 200>"}], "start": 1752506428365, "stop": 1752506428365}, {"name": "Check create user response", "status": "passed", "steps": [{"name": "Check that 'email' equals to 'mendozajean@mail.ru'", "status": "passed", "parameters": [{"name": "actual", "value": "'mendozajean@mail.ru'"}, {"name": "expected", "value": "'mendozajean@mail.ru'"}, {"name": "name", "value": "'email'"}], "start": 1752506428365, "stop": 1752506428365}, {"name": "Check that 'last_name' equals to 'Ramos'", "status": "passed", "parameters": [{"name": "actual", "value": "'Ramos'"}, {"name": "expected", "value": "'Ramos'"}, {"name": "name", "value": "'last_name'"}], "start": 1752506428365, "stop": 1752506428365}, {"name": "Check that 'first_name' equals to 'Tiffany'", "status": "passed", "parameters": [{"name": "actual", "value": "'Tiffany'"}, {"name": "expected", "value": "'Tiffany'"}, {"name": "name", "value": "'first_name'"}], "start": 1752506428365, "stop": 1752506428365}, {"name": "Check that 'middle_name' equals to 'Stephanie'", "status": "passed", "parameters": [{"name": "actual", "value": "'Stephanie'"}, {"name": "expected", "value": "'Stephanie'"}, {"name": "name", "value": "'middle_name'"}], "start": 1752506428365, "stop": 1752506428365}], "parameters": [{"name": "request", "value": "CreateUserRequestSchema(email='mendozajean@mail.ru', password='g(43X^BxNL', last_name='Ramos', first_name='Tiffany', middle_name='Stephanie')"}, {"name": "response", "value": "CreateUserResponseSchema(user=UserSchema(id='db1b475a-80f7-40ab-801f-22a3e319f791', email='mendozajean@mail.ru', last_name='Ramos', first_name='Tiffany', middle_name='Stephanie'))"}], "start": 1752506428365, "stop": 1752506428365}, {"name": "Validating JSON schema", "status": "broken", "statusDetails": {"message": "NameError: name 'Draft202012Validator' is not defined\n", "trace": "  File \"/Users/basmakovoleg/my-git-projects/autotests-api/.venv/lib/python3.11/site-packages/allure_commons/_allure.py\", line 202, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/Users/basmakovoleg/my-git-projects/autotests-api/tools/assertions/schema.py\", line 25, in validate_json_schema\n    format_checker=Draft202012Validator.FORMAT_CHECKER,\n                   ^^^^^^^^^^^^^^^^^^^^\n"}, "parameters": [{"name": "instance", "value": "{'user': {'id': 'db1b475a-80f7-40ab-801f-22a3e319f791', 'email': 'mendozajean@mail.ru', 'lastName': 'Ramos', 'firstName': 'Tiffany', 'middleName': 'Stephanie'}}"}, {"name": "schema", "value": "{'$defs': {'UserSchema': {'description': 'Описание структуры пользователя.', 'properties': {'id': {'title': 'Id', 'type': 'string'}, 'email': {'format': 'email', 'title': 'Email', 'type': 'string'}, 'lastName': {'title': 'Lastname', 'type': 'string'}, 'firstName': {'title': 'Firstname', 'type': 'string'}, 'middleName': {'title': 'Middlename', 'type': 'string'}}, 'required': ['id', 'email', 'lastName', 'firstName', 'middleName'], 'title': 'UserSchema', 'type': 'object'}}, 'description': 'Описание структуры ответа создания пользователя.', 'properties': {'user': {'$ref': '#/$defs/UserSchema'}}, 'required': ['user'], 'title': 'CreateUserResponseSchema', 'type': 'object'}"}], "start": 1752506428366, "stop": 1752506428366}], "attachments": [{"name": "log", "source": "de0e1398-35e7-4193-a39e-ef19354d7871-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "email", "value": "'mail.ru'"}], "start": 1752506428069, "stop": 1752506428366, "uuid": "8dda4889-4c88-4d2e-a8f1-f8bd4b302cfe", "historyId": "3aa508babec4cd5049039c360d0540c9", "testCaseId": "0f342f12f889b3471502fbe48e8f59c2", "fullName": "tests.users.test_users.TestUsers#test_create_user", "labels": [{"name": "feature", "value": "Users"}, {"name": "tag", "value": "REGRESSION"}, {"name": "severity", "value": "blocker"}, {"name": "tag", "value": "USERS"}, {"name": "parentSuite", "value": "LMS service"}, {"name": "epic", "value": "LMS service"}, {"name": "subSuite", "value": "Create entity"}, {"name": "tag", "value": "CREATE_ENTITY"}, {"name": "story", "value": "Create entity"}, {"name": "suite", "value": "Users"}, {"name": "tag", "value": "regression"}, {"name": "tag", "value": "users"}, {"name": "host", "value": "MacBook-Pro-Tochka-2.local"}, {"name": "thread", "value": "20295-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.users.test_users"}]}