{"name": "Get exercises", "status": "broken", "statusDetails": {"message": "NameError: name 'Draft202012Validator' is not defined", "trace": "self = <tests.exercises.test_exercises.TestExercises object at 0x107544a90>\nexercises_client = <clients.exercises.exercises_client.ExercisesClient object at 0x10782f610>\nfunction_course = CourseFixture(request=CreateCourseRequestSchema(title='Law on heart learn.', max_score=75, min_score=6, description='M...-a172-899a873c6075', email='tiffany57@example.net', last_name='Novak', first_name='Lauren', middle_name='Katherine'))))\nfunction_exercise = ExerciseFixture(request=CreateExerciseRequestSchema(title='Describe theory expert.', course_id='66d63af4-73a0-430e-b29...esource once. Worry wrong rich national pretty brother event.\\nControl size bit once big.', estimated_time='5 weeks')))\n\n    @allure.title(\"Get exercises\")\n    @allure.story(AllureStory.GET_ENTITIES)\n    @allure.sub_suite(AllureStory.GET_ENTITIES)\n    def test_get_exercises(\n            self,\n            exercises_client: ExercisesClient,\n            function_course: CourseFixture,\n            function_exercise: ExerciseFixture\n    ):\n        query = GetExercisesQuerySchema(course_id=function_course.response.course.id)\n        response = exercises_client.get_exercises_api(query)\n        response_data = GetExercisesResponseSchema.model_validate_json(response.text)\n    \n        assert_status_code(response.status_code, HTTPStatus.OK)\n        assert_get_exercises_response(response_data, [function_exercise.response])\n    \n>       validate_json_schema(response.json(), response_data.model_json_schema())\n\ntests/exercises/test_exercises.py:48: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ninstance = {'exercises': [{'courseId': '66d63af4-73a0-430e-b29d-70c2ce471fa3', 'description': 'Throughout speak over guy. Beyond ...r event.\\nControl size bit once big.', 'estimatedTime': '5 weeks', 'id': 'f41cf433-8e88-426e-bf01-0eacf7812de7', ...}]}\nschema = {'$defs': {'ExerciseSchema': {'description': 'Описание структуры задания.', 'properties': {'courseId': {'title': 'Cour...hema'}, 'title': 'Exercises', 'type': 'array'}}, 'required': ['exercises'], 'title': 'GetExercisesResponseSchema', ...}\n\n    @allure.step(\"Validating JSON schema\")\n    def validate_json_schema(instance: Any, schema: dict) -> None:\n        \"\"\"\n        Проверяет, соответствует ли JSON-объект (instance) заданной JSON-схеме (schema).\n    \n        :param instance: JSON-данные, которые нужно проверить.\n        :param schema: Ожидаемая JSON-schema.\n        :raises jsonschema.exceptions.ValidationError: Если instance не соответствует schema.\n        \"\"\"\n        # Логируем факт начала валидации\n        logger.info(\"Validating JSON schema\")\n    \n        validate(\n            schema=schema,\n            instance=instance,\n>           format_checker=Draft202012Validator.FORMAT_CHECKER,\n                           ^^^^^^^^^^^^^^^^^^^^\n        )\nE       NameError: name 'Draft202012Validator' is not defined\n\ntools/assertions/schema.py:25: NameError"}, "steps": [{"name": "Get exercises", "status": "passed", "steps": [{"name": "Make GET request to '/api/v1/exercises'", "status": "passed", "attachments": [{"name": "cURL command", "source": "09957219-34e1-4371-b439-131828e7e95d-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "url", "value": "'/api/v1/exercises'"}, {"name": "params", "value": "{'courseId': '66d63af4-73a0-430e-b29d-70c2ce471fa3'}"}], "start": 1752506422105, "stop": 1752506422110}], "parameters": [{"name": "query", "value": "GetExercisesQuerySchema(course_id='66d63af4-73a0-430e-b29d-70c2ce471fa3')"}], "start": 1752506422105, "stop": 1752506422110}, {"name": "Check that response status code equals to <HTTPStatus.OK: 200>", "status": "passed", "parameters": [{"name": "actual", "value": "200"}, {"name": "expected", "value": "<HTTPStatus.OK: 200>"}], "start": 1752506422111, "stop": 1752506422111}, {"name": "Check get exercises response", "status": "passed", "steps": [{"name": "Check that length of exercises equals to 1", "status": "passed", "start": 1752506422111, "stop": 1752506422111}, {"name": "Check exercise", "status": "passed", "steps": [{"name": "Check that 'id' equals to 'f41cf433-8e88-426e-bf01-0eacf7812de7'", "status": "passed", "parameters": [{"name": "actual", "value": "'f41cf433-8e88-426e-bf01-0eacf7812de7'"}, {"name": "expected", "value": "'f41cf433-8e88-426e-bf01-0eacf7812de7'"}, {"name": "name", "value": "'id'"}], "start": 1752506422111, "stop": 1752506422111}, {"name": "Check that 'title' equals to 'Describe theory expert.'", "status": "passed", "parameters": [{"name": "actual", "value": "'Describe theory expert.'"}, {"name": "expected", "value": "'Describe theory expert.'"}, {"name": "name", "value": "'title'"}], "start": 1752506422111, "stop": 1752506422111}, {"name": "Check that 'course_id' equals to '66d63af4-73a0-430e-b29d-70c2ce471fa3'", "status": "passed", "parameters": [{"name": "actual", "value": "'66d63af4-73a0-430e-b29d-70c2ce471fa3'"}, {"name": "expected", "value": "'66d63af4-73a0-430e-b29d-70c2ce471fa3'"}, {"name": "name", "value": "'course_id'"}], "start": 1752506422111, "stop": 1752506422111}, {"name": "Check that 'max_score' equals to 77", "status": "passed", "parameters": [{"name": "actual", "value": "77"}, {"name": "expected", "value": "77"}, {"name": "name", "value": "'max_score'"}], "start": 1752506422111, "stop": 1752506422111}, {"name": "Check that 'min_score' equals to 1", "status": "passed", "parameters": [{"name": "actual", "value": "1"}, {"name": "expected", "value": "1"}, {"name": "name", "value": "'min_score'"}], "start": 1752506422111, "stop": 1752506422111}, {"name": "Check that 'order_index' equals to 71", "status": "passed", "parameters": [{"name": "actual", "value": "71"}, {"name": "expected", "value": "71"}, {"name": "name", "value": "'order_index'"}], "start": 1752506422111, "stop": 1752506422111}, {"name": "Check that 'description' equals to 'Throughout speak over guy. Beyond already positive different resource once. Worry wrong rich national pretty brother event.\nControl size bit once big.'", "status": "passed", "parameters": [{"name": "actual", "value": "'Throughout speak over guy. Beyond already positive different resource once. Worry wrong rich national pretty brother event.\nControl size bit once big.'"}, {"name": "expected", "value": "'Throughout speak over guy. Beyond already positive different resource once. Worry wrong rich national pretty brother event.\nControl size bit once big.'"}, {"name": "name", "value": "'description'"}], "start": 1752506422111, "stop": 1752506422111}, {"name": "Check that 'estimated_time' equals to '5 weeks'", "status": "passed", "parameters": [{"name": "actual", "value": "'5 weeks'"}, {"name": "expected", "value": "'5 weeks'"}, {"name": "name", "value": "'estimated_time'"}], "start": 1752506422111, "stop": 1752506422111}], "parameters": [{"name": "actual", "value": "ExerciseSchema(id='f41cf433-8e88-426e-bf01-0eacf7812de7', title='Describe theory expert.', course_id='66d63af4-73a0-430e-b29d-70c2ce471fa3', max_score=77, min_score=1, order_index=71, description='Throughout speak over guy. Beyond already positive different resource once. Worry wrong rich national pretty brother event.\\nControl size bit once big.', estimated_time='5 weeks')"}, {"name": "expected", "value": "ExerciseSchema(id='f41cf433-8e88-426e-bf01-0eacf7812de7', title='Describe theory expert.', course_id='66d63af4-73a0-430e-b29d-70c2ce471fa3', max_score=77, min_score=1, order_index=71, description='Throughout speak over guy. Beyond already positive different resource once. Worry wrong rich national pretty brother event.\\nControl size bit once big.', estimated_time='5 weeks')"}], "start": 1752506422111, "stop": 1752506422111}], "parameters": [{"name": "get_exercises_response", "value": "GetExercisesResponseSchema(exercises=[ExerciseSchema(id='f41cf433-8e88-426e-bf01-0eacf7812de7', title='Describe theory expert.', course_id='66d63af4-73a0-430e-b29d-70c2ce471fa3', max_score=77, min_score=1, order_index=71, description='Throughout speak over guy. Beyond already positive different resource once. Worry wrong rich national pretty brother event.\\nControl size bit once big.', estimated_time='5 weeks')])"}, {"name": "create_exercise_responses", "value": "[CreateExerciseResponseSchema(exercise=ExerciseSchema(id='f41cf433-8e88-426e-bf01-0eacf7812de7', title='Describe theory expert.', course_id='66d63af4-73a0-430e-b29d-70c2ce471fa3', max_score=77, min_score=1, order_index=71, description='Throughout speak over guy. Beyond already positive different resource once. Worry wrong rich national pretty brother event.\\nControl size bit once big.', estimated_time='5 weeks'))]"}], "start": 1752506422111, "stop": 1752506422111}, {"name": "Validating JSON schema", "status": "broken", "statusDetails": {"message": "NameError: name 'Draft202012Validator' is not defined\n", "trace": "  File \"/Users/basmakovoleg/my-git-projects/autotests-api/.venv/lib/python3.11/site-packages/allure_commons/_allure.py\", line 202, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/Users/basmakovoleg/my-git-projects/autotests-api/tools/assertions/schema.py\", line 25, in validate_json_schema\n    format_checker=Draft202012Validator.FORMAT_CHECKER,\n                   ^^^^^^^^^^^^^^^^^^^^\n"}, "parameters": [{"name": "instance", "value": "{'exercises': [{'id': 'f41cf433-8e88-426e-bf01-0eacf7812de7', 'title': 'Describe theory expert.', 'courseId': '66d63af4-73a0-430e-b29d-70c2ce471fa3', 'maxScore': 77, 'minScore': 1, 'orderIndex': 71, 'description': 'Throughout speak over guy. Beyond already positive different resource once. Worry wrong rich national pretty brother event.\\nControl size bit once big.', 'estimatedTime': '5 weeks'}]}"}, {"name": "schema", "value": "{'$defs': {'ExerciseSchema': {'description': 'Описание структуры задания.', 'properties': {'id': {'title': 'Id', 'type': 'string'}, 'title': {'title': 'Title', 'type': 'string'}, 'courseId': {'title': 'Courseid', 'type': 'string'}, 'maxScore': {'title': 'Maxscore', 'type': 'integer'}, 'minScore': {'title': 'Minscore', 'type': 'integer'}, 'orderIndex': {'title': 'Orderindex', 'type': 'integer'}, 'description': {'title': 'Description', 'type': 'string'}, 'estimatedTime': {'title': 'Estimatedtime', 'type': 'string'}}, 'required': ['id', 'title', 'courseId', 'maxScore', 'minScore', 'orderIndex', 'description', 'estimatedTime'], 'title': 'ExerciseSchema', 'type': 'object'}}, 'properties': {'exercises': {'items': {'$ref': '#/$defs/ExerciseSchema'}, 'title': 'Exercises', 'type': 'array'}}, 'required': ['exercises'], 'title': 'GetExercisesResponseSchema', 'type': 'object'}"}], "start": 1752506422112, "stop": 1752506422112}], "attachments": [{"name": "log", "source": "0058a55d-8b31-44fe-bcd6-f36ac2524268-attachment.txt", "type": "text/plain"}], "start": 1752506422105, "stop": 1752506422112, "uuid": "2447bb36-4c14-4f4d-8610-7f9f1accecac", "historyId": "2eb4fbc6b63797923e154311c9993d93", "testCaseId": "2eb4fbc6b63797923e154311c9993d93", "fullName": "tests.exercises.test_exercises.TestExercises#test_get_exercises", "labels": [{"name": "tag", "value": "EXERCISES"}, {"name": "tag", "value": "REGRESSION"}, {"name": "suite", "value": "Exercises"}, {"name": "feature", "value": "Exercises"}, {"name": "parentSuite", "value": "LMS service"}, {"name": "epic", "value": "LMS service"}, {"name": "subSuite", "value": "Get entities"}, {"name": "story", "value": "Get entities"}, {"name": "tag", "value": "regression"}, {"name": "tag", "value": "exercises"}, {"name": "host", "value": "MacBook-Pro-Tochka-2.local"}, {"name": "thread", "value": "20295-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.exercises.test_exercises"}]}