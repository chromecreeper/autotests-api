{"name": "Create course", "status": "broken", "statusDetails": {"message": "NameError: name 'Draft202012Validator' is not defined", "trace": "self = <tests.courses.test_courses.TestCourses object at 0x107539210>, courses_client = <clients.courses.courses_client.CoursesClient object at 0x1077e9810>\nfunction_file = FileFixture(request=CreateFileRequestSchema(filename='dcf25aa0-1f83-444a-b53e-64c7333e06cc.png', directory='tests', up...s/dcf25aa0-1f83-444a-b53e-64c7333e06cc.png'), filename='dcf25aa0-1f83-444a-b53e-64c7333e06cc.png', directory='tests')))\nfunction_user = UserFixture(request=CreateUserRequestSchema(email='rkelley@example.org', password='a&1Vsvv&XG', last_name='Ray', first...d54-4246-847b-7fae1cf58f28', email='rkelley@example.org', last_name='Ray', first_name='Sara', middle_name='Jennifer')))\n\n    @allure.title(\"Create course\")\n    @allure.story(AllureStory.CREATE_ENTITY)\n    @allure.sub_suite(AllureStory.CREATE_ENTITY)\n    def test_create_course(self, courses_client: CoursesClient, function_file: FileFixture, function_user: UserFixture):\n        request = CreateCourseRequestSchema(\n            preview_file_id=function_file.response.file.id,\n            created_by_user_id=function_user.response.user.id,\n        )\n        response = courses_client.create_course_api(request)\n        response_data = CreateCourseResponseSchema.model_validate_json(response.text)\n    \n        assert_status_code(response.status_code, HTTPStatus.OK)\n    \n>       validate_json_schema(response.json(), response_data.model_json_schema())\n\ntests/courses/test_courses.py:61: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ninstance = {'course': {'createdByUser': {'email': 'rkelley@example.org', 'firstName': 'Sara', 'id': 'c42edd5a-0d54-4246-847b-7fae...ep west language protect sign market.', 'estimatedTime': '9 weeks', 'id': '6c5e030b-097c-4486-bf14-5ab02a11328d', ...}}\nschema = {'$defs': {'CourseSchema': {'description': 'Описание модели курса.', 'properties': {'createdByUser': {'$ref': '#/$defs...ктуры ответа создания курса.', 'properties': {'course': {'$ref': '#/$defs/CourseSchema'}}, 'required': ['course'], ...}\n\n    @allure.step(\"Validating JSON schema\")\n    def validate_json_schema(instance: Any, schema: dict) -> None:\n        \"\"\"\n        Проверяет, соответствует ли JSON-объект (instance) заданной JSON-схеме (schema).\n    \n        :param instance: JSON-данные, которые нужно проверить.\n        :param schema: Ожидаемая JSON-schema.\n        :raises jsonschema.exceptions.ValidationError: Если instance не соответствует schema.\n        \"\"\"\n        # Логируем факт начала валидации\n        logger.info(\"Validating JSON schema\")\n    \n        validate(\n            schema=schema,\n            instance=instance,\n>           format_checker=Draft202012Validator.FORMAT_CHECKER,\n                           ^^^^^^^^^^^^^^^^^^^^\n        )\nE       NameError: name 'Draft202012Validator' is not defined\n\ntools/assertions/schema.py:25: NameError"}, "steps": [{"name": "Create course", "status": "passed", "steps": [{"name": "Make POST request to '/api/v1/courses'", "status": "passed", "attachments": [{"name": "cURL command", "source": "99105318-1929-47d8-80c1-9bc4372ea017-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "url", "value": "'/api/v1/courses'"}, {"name": "json", "value": "{'title': 'Along church model term physical letter huge.', 'maxScore': 86, 'minScore': 10, 'description': 'Forget manager personal able whatever like treat. Wife deep west language protect sign market.', 'estimatedTime': '9 weeks', 'previewFileId': '13e11190-cbdd-4c13-bd33-daab6d48f87a', 'createdByUserId': 'c42edd5a-0d54-4246-847b-7fae1cf58f28'}"}, {"name": "data", "value": "None"}, {"name": "files", "value": "None"}], "start": 1752506420727, "stop": 1752506420739}], "parameters": [{"name": "request", "value": "CreateCourseRequestSchema(title='Along church model term physical letter huge.', max_score=86, min_score=10, description='Forget manager personal able whatever like treat. Wife deep west language protect sign market.', estimated_time='9 weeks', preview_file_id='13e11190-cbdd-4c13-bd33-daab6d48f87a', created_by_user_id='c42edd5a-0d54-4246-847b-7fae1cf58f28')"}], "start": 1752506420727, "stop": 1752506420739}, {"name": "Check that response status code equals to <HTTPStatus.OK: 200>", "status": "passed", "parameters": [{"name": "actual", "value": "200"}, {"name": "expected", "value": "<HTTPStatus.OK: 200>"}], "start": 1752506420739, "stop": 1752506420739}, {"name": "Validating JSON schema", "status": "broken", "statusDetails": {"message": "NameError: name 'Draft202012Validator' is not defined\n", "trace": "  File \"/Users/basmakovoleg/my-git-projects/autotests-api/.venv/lib/python3.11/site-packages/allure_commons/_allure.py\", line 202, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/Users/basmakovoleg/my-git-projects/autotests-api/tools/assertions/schema.py\", line 25, in validate_json_schema\n    format_checker=Draft202012Validator.FORMAT_CHECKER,\n                   ^^^^^^^^^^^^^^^^^^^^\n"}, "parameters": [{"name": "instance", "value": "{'course': {'id': '6c5e030b-097c-4486-bf14-5ab02a11328d', 'title': 'Along church model term physical letter huge.', 'maxScore': 86, 'minScore': 10, 'description': 'Forget manager personal able whatever like treat. Wife deep west language protect sign market.', 'previewFile': {'id': '13e11190-cbdd-4c13-bd33-daab6d48f87a', 'filename': 'dcf25aa0-1f83-444a-b53e-64c7333e06cc.png', 'directory': 'tests', 'url': 'http://localhost:8000/static/tests/dcf25aa0-1f83-444a-b53e-64c7333e06cc.png'}, 'estimatedTime': '9 weeks', 'createdByUser': {'id': 'c42edd5a-0d54-4246-847b-7fae1cf58f28', 'email': 'rkelley@example.org', 'lastName': 'Ray', 'firstName': 'Sara', 'middleName': 'Jennifer'}}}"}, {"name": "schema", "value": "{'$defs': {'CourseSchema': {'description': 'Описание модели курса.', 'properties': {'id': {'title': 'Id', 'type': 'string'}, 'title': {'default': 'Playwright', 'title': 'Title', 'type': 'string'}, 'maxScore': {'default': 1000, 'title': 'Maxscore', 'type': 'integer'}, 'minScore': {'default': 100, 'title': 'Minscore', 'type': 'integer'}, 'description': {'default': 'Playwright course', 'title': 'Description', 'type': 'string'}, 'previewFile': {'$ref': '#/$defs/FileSchema'}, 'estimatedTime': {'default': '2 weeks', 'title': 'Estimatedtime', 'type': 'string'}, 'createdByUser': {'$ref': '#/$defs/UserSchema'}}, 'required': ['previewFile', 'createdByUser'], 'title': 'CourseSchema', 'type': 'object'}, 'FileSchema': {'description': 'Описание структуры файла.', 'properties': {'id': {'title': 'Id', 'type': 'string'}, 'url': {'format': 'uri', 'maxLength': 2083, 'minLength': 1, 'title': 'Url', 'type': 'string'}, 'filename': {'title': 'Filename', 'type': 'string'}, 'directory': {'title': 'Directory', 'type': 'string'}}, 'required': ['id', 'url', 'filename', 'directory'], 'title': 'FileSchema', 'type': 'object'}, 'UserSchema': {'description': 'Описание структуры пользователя.', 'properties': {'id': {'title': 'Id', 'type': 'string'}, 'email': {'format': 'email', 'title': 'Email', 'type': 'string'}, 'lastName': {'title': 'Lastname', 'type': 'string'}, 'firstName': {'title': 'Firstname', 'type': 'string'}, 'middleName': {'title': 'Middlename', 'type': 'string'}}, 'required': ['id', 'email', 'lastName', 'firstName', 'middleName'], 'title': 'UserSchema', 'type': 'object'}}, 'description': 'Описание структуры ответа создания курса.', 'properties': {'course': {'$ref': '#/$defs/CourseSchema'}}, 'required': ['course'], 'title': 'CreateCourseResponseSchema', 'type': 'object'}"}], "start": 1752506420741, "stop": 1752506420741}], "attachments": [{"name": "log", "source": "83f58c77-a409-4ac1-8098-710b7ae50624-attachment.txt", "type": "text/plain"}], "start": 1752506420727, "stop": 1752506420741, "uuid": "ec08447f-1e6b-4288-bdbd-170c5512a073", "historyId": "b2358a8d7f2f37aff8aaa00005adc7b1", "testCaseId": "b2358a8d7f2f37aff8aaa00005adc7b1", "fullName": "tests.courses.test_courses.TestCourses#test_create_course", "labels": [{"name": "feature", "value": "Courses"}, {"name": "tag", "value": "REGRESSION"}, {"name": "tag", "value": "COURSES"}, {"name": "parentSuite", "value": "LMS service"}, {"name": "epic", "value": "LMS service"}, {"name": "subSuite", "value": "Create entity"}, {"name": "story", "value": "Create entity"}, {"name": "suite", "value": "Courses"}, {"name": "tag", "value": "regression"}, {"name": "tag", "value": "courses"}, {"name": "host", "value": "MacBook-Pro-Tochka-2.local"}, {"name": "thread", "value": "20295-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.courses.test_courses"}]}